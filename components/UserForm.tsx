'use client'

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
 
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { useState } from "react"

import { Loader2 } from "lucide-react"

import { toast } from 'sonner'
 
const formSchema = z.object({
  name: z.string().min(2, {
    message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞",
  }).max(50, {
    message: "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"
  }),

  phone: z.string()
    .min(9, {message: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"})
    .max(13, { message: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" })
    .regex(/^(\+7|8)[\d\- ]{9,12}$/, { message: "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä" }),

  description: z.string()
    .max(500, {message: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—à–∞–µ—Ç 500 —Å–∏–º–≤–æ–ª–æ–≤"})
})

export default function UserForm(){

    const [isLoading, setIsLoading] = useState(false)
    const [isSuccess, setIsSuccess] = useState(false)

    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
          name: "",
          phone: "",
          description: "",
        },
    })

    async function onSubmit(values: z.infer<typeof formSchema>) {
        setIsLoading(true)

        try {
            const message = `üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\nüë§ –ò–º—è: ${values.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${values.phone}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${values.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`

            const response = await fetch('/api/send-to-telegram', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  message,
                }),
            })

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
                
                toast.success('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', {
                    description: '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
                  })
                  form.reset()

        } catch (error) {
            toast.error('–û—à–∏–±–∫–∞', {
                description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            })
        } finally{
            setIsLoading(false)
        }
    }

    return(
        <div className="max-w-[1000px] border border-amber-300 rounded-lg p-7 w-full">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                    <FormField
                        control={form.control}
                        name="name"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</FormLabel>
                            <FormControl>
                                <Input placeholder="–ê—Ä—Ç–µ–º–∏–π –°–∏–±–∏—Ä—è–∫–æ–≤" {...field} />
                            </FormControl>
                            <FormMessage />

                            {/* –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ñ–æ—Ä–º–æ–π */}
                            {/* <FormDescription>
                                This is your public display name.
                            </FormDescription> */}
                        </FormItem>
                    )}
                    />
                    <FormField
                        control={form.control}
                        name="phone"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</FormLabel>
                            <FormControl>
                                <Input placeholder="8911..." {...field} />
                            </FormControl>
                            <FormMessage />

                            {/* –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ñ–æ—Ä–º–æ–π */}
                            {/* <FormDescription>
                                This is your public display name.
                            </FormDescription> */}
                        </FormItem>
                    )}
                    />
                    <FormField
                        control={form.control}
                        name="description"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</FormLabel>
                            <FormControl>
                                <Textarea placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤ –∫–ª—É–±–µ..." {...field}/>
                            </FormControl>
                            <FormMessage />

                            {/* –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ñ–æ—Ä–º–æ–π */}
                            {/* <FormDescription>
                                This is your public display name.
                            </FormDescription> */}
                        </FormItem>
                    )}
                    />
                    <Button 
                        type="submit" 
                        disabled={isLoading}
                        className="flex mx-auto w-full max-w-[250px] h-10"
                    >
                        {isLoading ? (
                        <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            –û—Ç–ø—Ä–∞–≤–∫–∞...
                        </>
                        ) : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
                    </Button>
                </form>
            </Form>
        </div>
    )
}